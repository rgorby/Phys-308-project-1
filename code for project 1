import numpy as np
from math import sqrt
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

def brownian(steps,time):
    '''A function which mimics brownian motion, specifically the Wiener process
            X(t+dt)=X_0+(exp(-x**2 / 2*t)/sqrt(s*pi*t)), with the goal of making 
            it as simple as possible to abstract to 3 dimensions'''
    X_0, Y_0, Z_0 = 0,0,0
    mean = 0
    delta = time/steps
    X,Y,Z = [X_0],[Y_0],[Z_0]

    t =np.linspace(0,steps+1,steps+1)
       
    
    for s in range(steps):
        X.append(X[s]+np.random.normal(mean,delta))
        Y.append(Y[s]+np.random.normal(mean,delta))
        Z.append(Z[s]+np.random.normal(mean,delta))
        
    print(len(X))
    print(len(t))
    fig = plt.figure()
    ax = plt.axes(projection = '3d')
    #plot(X,Y,Z)
    ax.plot3D(X,Y,Z,'gray')
    ax.scatter3D(X[0],Y[0],Z[0],'go')
    ax.scatter3D(X[-1],Y[-1],Z[-1],'ro')
    show()
    
brownian(1000,100)
